name: lti13
version: 0.3.0.0
synopsis: Core functionality for LTI 1.3
description: >
    A library implementing the core
    <http://www.imsglobal.org/spec/lti/v1p3/ LTI 1.3> authentication protocol,
    suitable for use in implementing libraries for any web framework. An example
    use is <https://hackage.haskell.org/package/yesod-auth-lti13>
author: Jade Lovelace
maintainer: Jade Lovelace <software at lfcode dot ca>
category: Web
license-file: LICENSE

extra-source-files:
    - CHANGELOG.md
    - README.md
    - ./tests/*.json

github: lf-/lti13

default-extensions:
    - NamedFieldPuns
    - OverloadedStrings
    - RecordWildCards
    - DeriveGeneric

dependencies:
    - aeson           >= 2 && < 2.2
    - base            >= 4.12.0 && < 5
    - bytestring      >= 0.10.10 && < 0.12
    - containers      >= 0.6.2 && < 0.7
    - text            >= 1.2.4 && < 1.3
    - http-client     >= 0.6.4 && < 0.8
    - http-types      >= 0.12.3 && < 0.13
    - jose-jwt        >= 0.8.0 && < 0.10
    - oidc-client     >= 0.5.1 && < 0.7
    - safe-exceptions >= 0.1.7 && < 0.2

# from https://medium.com/mercury-bank/enable-all-the-warnings-a0517bc081c3
ghc-options:
    - -Weverything
    - -Wno-missing-exported-signatures # missing-exported-signatures turns off the more strict -Wmissing-signatures. See https://ghc.haskell.org/trac/ghc/ticket/14794#ticket
    - -Wno-missing-export-lists # Requires explicit export lists for every module, a pain for large modules
    - -Wno-missing-import-lists # Requires explicit imports of _every_ function (e.g. '$'); too strict
    - -Wno-missed-specialisations # When GHC can't specialize a polymorphic function. No big deal and requires fixing underlying libraries to solve.
    - -Wno-all-missed-specialisations # See missed-specialisations
    - -Wno-unsafe # Don't use Safe Haskell warnings
    - -Wno-missing-local-signatures # Warning for polymorphic local bindings. Don't think this is an issue
    - -Wno-monomorphism-restriction # Don't warn if the monomorphism restriction is used
    - -Wno-missing-safe-haskell-mode # Cabal isn’t setting this currently (introduced in GHC 8.10)
    - -Wno-prepositive-qualified-module # Cabal’s generate Path_*.hs doesn’t do this (fixed in https://github.com/haskell/cabal/pull/7352)
    - -Wno-unused-packages # Some tooling gives this error
    - -Wno-missing-kind-signatures # Warns on literally every type

library:
    source-dirs: src

tests:
    spec:
        main: Spec.hs
        source-dirs: tests
        dependencies:
            - hspec
            - QuickCheck
            - file-embed
            - th-utilities
